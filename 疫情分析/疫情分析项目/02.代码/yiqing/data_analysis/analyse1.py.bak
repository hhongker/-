import pandas as pd
from pyecharts.charts import Line#折线图绘制所需要的库
from pyecharts.charts import Page#将所有图像放在同一页所需要的库
import pyecharts.options as opts#设置全局变量
from util import dealWithFile as dwf

###############################################################################
#此文件代码需要用到任务3代码生成的data下的xlsx文件数据，请放在与data同目录
"""
针对部分任务3的代码爬取并保存为.xlsx的信息进行数据可视化，使用了pyecharts的scatter
散点图库，对生成的图像进行了分析，并新建了文件夹analysis用于存放所生成的
所有图像文件。
"""
###############################################################################

readPath = dwf.rootPath #读取数据的地方
savaPath = dwf.savaPath1 #生成结果的地方
flag = dwf.flag #是否生成的数据

page=Page()#创建一个分页用于放所有的图像在这一分页上
def analyse_Chinaeveryday():
    filePath =  readPath + '\\中国总体历史疫情信息\\历史每日新增信息.xlsx'
    Chian_day=pd.DataFrame(pd.read_excel(filePath))#读取信息
    CNday_date=list(Chian_day['date'])
    CNday_confirm=list(Chian_day['confirm'])
    CNday_suspect=list(Chian_day['suspect'])
    CNday_dead=list(Chian_day['dead'])
    CNday_heal=list(Chian_day['heal'])
    CNday_importedCase=list(Chian_day['importedCase'])
    CNday_infect=list(Chian_day['infect'])
    CNday_deadRate=list(Chian_day['deadRate'])
    CNday_healRate=list(Chian_day['healRate'])
    line_CNday=\
    (
        Line()
        .add_xaxis(xaxis_data=CNday_date)#xaxis_data为x轴，y_axis为y轴
        .add_yaxis(series_name='确诊',y_axis=CNday_confirm,label_opts=opts.LabelOpts(is_show=False))
        .add_yaxis(series_name='疑似',y_axis=CNday_suspect,label_opts=opts.LabelOpts(is_show=False))#数据值得不显示
        .add_yaxis(series_name= '死亡',y_axis=CNday_dead,label_opts=opts.LabelOpts(is_show=False))
        .add_yaxis(series_name='治愈',y_axis=CNday_heal,label_opts=opts.LabelOpts(is_show=False))
        .add_yaxis(series_name='境外输入',y_axis=CNday_importedCase,label_opts=opts.LabelOpts(is_show=False))
        .add_yaxis(series_name='infect',y_axis=CNday_infect,label_opts=opts.LabelOpts(is_show=False))
        .add_yaxis(series_name='死亡率',y_axis=CNday_deadRate,label_opts=opts.LabelOpts(is_show=False))
        .add_yaxis(series_name='治愈率',y_axis=CNday_healRate,label_opts=opts.LabelOpts(is_show=False))
        .set_global_opts(title_opts=opts.TitleOpts(title='历史每日新增信息',pos_left='50%',pos_top='10%'),tooltip_opts=opts.TooltipOpts(axis_pointer_type= 'cross'))

    )#创建折线图
    # line_CNday.render(path+'\\Chinaeveryday.html')#将生成的图像保存为html文件并存放在analisis文件夹
    if flag: dwf.write_to_file(savaPath+'\\Chinaeveryday.txt',str(line_CNday.dump_options_with_quotes()))
    page.add(line_CNday) #将图像加入同一页

    return line_CNday
    """
    从中国的历史每日新增数据pyecharts散点图中，在2月12日，中国新增确诊人数(confirm)高达一万五千以上，之所以有这么大的差距，是因为确诊的标准发生了变化，
    由之前的核酸检测，到核磁CT。通过相关部门人员的调查，可以发现新病例全部包括临床诊断病例（临床诊断病例用于治疗大多数临床症状主要表现为发热、乏力、干咳、
    鼻塞、流鼻涕等外感症状，其CT结果显示为肺炎反应，但其核酸检测未被确认为临床确诊病例的疑似患者）。很明显，这是高峰到来的样子这表明冠状病毒隐形载体传播者的大部分问题已经被逐一发现。
    也就是说，这种流行病的预防和控制起到了一定的作用，这种流行病的预防和控制在抗疫战争中取得了显著的成绩。随着高峰期的突出和这一流行病接近尾声，相信恢复正常的社会生活已不远了。
    """

def analyse_province():
    filePath = readPath + '\\中国各省市(区)总体疫情信息\\中国各省市(区)总体疫情信息.xlsx'
    Province=pd.DataFrame(pd.read_excel(filePath))
    prov_nowConfirm=list(Province['nowConfirm'])
    prov_confirm=list(Province['confirm'])
    prov_suspect=list(Province['suspect'])
    prov_dead=list(Province['dead'])
    prov_deadRate=list(Province['deadRate'])
    prov_showRate=list(Province['showRate'])
    prov_heal=list(Province['heal'])
    prov_healRate=list(Province['healRate'])
    prov_showHeal=list(Province['showHeal'])
    prov_importedCase=list(Province['importedCase'])
    prov_name=list(Province['name'])
    line_prov=\
    (
        Line()
        .add_xaxis(xaxis_data=prov_name)#xaxis_data为x轴，y_axis为y轴
        .add_yaxis(series_name='现有确诊',y_axis=prov_nowConfirm,label_opts=opts.LabelOpts(is_show=False))
        .add_yaxis(series_name='确诊',y_axis=prov_confirm,label_opts=opts.LabelOpts(is_show=False))
        .add_yaxis(series_name='疑似',y_axis=prov_suspect,label_opts=opts.LabelOpts(is_show=False))
        .add_yaxis(series_name='死亡',y_axis=prov_dead,label_opts=opts.LabelOpts(is_show=False))#数据值得不显示
        .add_yaxis(series_name= '死亡率',y_axis=prov_deadRate,label_opts=opts.LabelOpts(is_show=False))
        .add_yaxis(series_name='showRate',y_axis=prov_showRate,label_opts=opts.LabelOpts(is_show=False))
        .add_yaxis(series_name='治愈',y_axis=prov_heal,label_opts=opts.LabelOpts(is_show=False))
        .add_yaxis(series_name='治愈率',y_axis=prov_healRate,label_opts=opts.LabelOpts(is_show=False))
        .add_yaxis(series_name='showHeal',y_axis=prov_showHeal,label_opts=opts.LabelOpts(is_show=False))
        .add_yaxis(series_name='境外输入',y_axis=prov_importedCase,label_opts=opts.LabelOpts(is_show=False))
        .set_global_opts(title_opts=opts.TitleOpts(title='中国各省市(区)总体疫情信息',pos_left='50%',pos_top='10%'),tooltip_opts=opts.TooltipOpts(axis_pointer_type= 'cross'))

    )#创建折线图
    # line_prov.render(path+'\\province.html')#将生成的图像保存为html文件并存放在analisis文件夹
    page.add(line_prov)#将图像加入同一页
    if flag: dwf.write_to_file(savaPath+'\\province.txt',str(line_prov.dump_options_with_quotes()))
    return line_prov
    """利用pyecharts散点图对中国的历史数据做可视化，可以看出新增确诊人数(newConfirm)，累计确诊人数(confirm)，疑似(suspect)人数达到峰值的日期都接近于2月17日前后，
    随后都逐渐下降，，而累计确诊人数也在随后趋于平缓，治愈人数也在不断趋近去确诊人数，明显可以看出中国疫情防控取得了有效的成果。
    """

def analyse_worldhistory():
    filePath = readPath + '\\世界总体疫情信息\\世界总体疫情信息.xlsx'
    world_history=pd.DataFrame(pd.read_excel(filePath))
    world_name=list(world_history['name'])
    world_confirmAdd=list(world_history['confirmAdd'])
    world_confirmAddCut=list(world_history['confirmAddCut'])
    world_confirm=list(world_history['confirm'])
    world_suspect=list(world_history['suspect'])
    world_dead=list(world_history['dead'])
    world_heal=list(world_history['heal'])
    world_nowConfirm=list(world_history['nowConfirm'])
    world_confirmCompare=list(world_history['confirmCompare'])
    world_nowConfirmCompare=list(world_history['nowConfirmCompare'])
    world_healCompare=list(world_history['healCompare'])
    world_deadCompare=list(world_history['deadCompare'])
    line_world=\
    (
            Line()
          .add_xaxis(xaxis_data=world_name)  #xaxis_data为x轴，y_axis为y轴
          .add_yaxis(series_name='新增确诊',y_axis=world_confirmAdd,label_opts=opts.LabelOpts(is_show=False))
          .add_yaxis(series_name='confirmAddCut',y_axis=world_confirmAddCut,label_opts=opts.LabelOpts(is_show=False))
          .add_yaxis(series_name='确诊',y_axis=world_confirm,label_opts=opts.LabelOpts(is_show=False))
          .add_yaxis(series_name='s疑似',y_axis=world_suspect,label_opts=opts.LabelOpts(is_show=False))
          .add_yaxis(series_name='死亡',y_axis=world_dead,label_opts=opts.LabelOpts(is_show=False))
          .add_yaxis(series_name='治愈',y_axis=world_heal,label_opts=opts.LabelOpts(is_show=False))
          .add_yaxis(series_name='现有确诊',y_axis=world_nowConfirm,label_opts=opts.LabelOpts(is_show=False))
          .add_yaxis(series_name='confirmCompare',y_axis=world_confirmCompare,label_opts=opts.LabelOpts(is_show=False))
          .add_yaxis(series_name='nowConfirmCompare',y_axis=world_nowConfirmCompare,label_opts=opts.LabelOpts(is_show=False))
          .add_yaxis(series_name='healCompare',y_axis=world_healCompare,label_opts=opts.LabelOpts(is_show=False))
          .add_yaxis(series_name='deadCompare',y_axis=world_deadCompare,label_opts=opts.LabelOpts(is_show=False))
          .set_global_opts(title_opts=opts.TitleOpts(title='世界总体疫情信息',pos_left='50%',pos_top='10%'),tooltip_opts=opts.TooltipOpts(axis_pointer_type= 'cross'))

    )#创建散点图
    # line_world.render(path+'\\world.html')#将生成的图像保存为html文件并存放在analisis文件夹
    if flag: dwf.write_to_file(savaPath+'\\world.txt',str(line_world.dump_options_with_quotes()))
    page.add(line_world)#将图像加入同一页
    return line_world
    """
    从世界总体疫情数据pyecharts散点图中，美国至今的现有确诊人数(nowfirm)和累计确诊人数远远超过其他国家。根据相关美国媒体报道，美国疫情爆发初，
    美国虽然采取了限制和隔离措施，但是管控力度还是比较松散的，完全没有达到能够控制疫情的强度，西方国家很难迅速遏制疫情扩散，管理松散，民众意识还不足以抗击疫情。
    """

def analyse_Chinahistory():
    filePath =  readPath + '\\中国总体历史疫情信息\\历史总体信息.xlsx'
    China_history=pd.DataFrame(pd.read_excel(filePath))
    CNhis_date=list(China_history['date'])
    CNhis_confirm=list(China_history['confirm'])
    CNhis_suspect=list(China_history['suspect'])
    CNhis_dead=list(China_history['dead'])
    CNhis_heal=list(China_history['heal'])
    CNhis_nowConfirm=list(China_history['nowConfirm'])
    CNhis_nowSevere=list(China_history['nowSevere'])
    CNhis_importedCase=list(China_history['importedCase'])
    CNhis_deadRate=list(China_history['deadRate'])
    CNhis_healRate=list(China_history['healRate'])
    CNhis_noInfect=list(China_history['noInfect'])
    line_CNhis=\
    (
            Line()
            .add_xaxis(xaxis_data=CNhis_date)#xaxis_data为x轴，y_axis为y轴
            .add_yaxis(series_name='确诊',y_axis=CNhis_confirm,label_opts=opts.LabelOpts(is_show=False))
            .add_yaxis(series_name='疑似',y_axis=CNhis_suspect,label_opts=opts.LabelOpts(is_show=False))
            .add_yaxis(series_name='死亡',y_axis=CNhis_dead,label_opts=opts.LabelOpts(is_show=False))
            .add_yaxis(series_name='治愈',y_axis=CNhis_heal,label_opts=opts.LabelOpts(is_show=False))
            .add_yaxis(series_name='现有确诊',y_axis=CNhis_nowConfirm,label_opts=opts.LabelOpts(is_show=False))
            .add_yaxis(series_name='现有重症',y_axis=CNhis_nowSevere,label_opts=opts.LabelOpts(is_show=False))
            .add_yaxis(series_name='境外输入',y_axis=CNhis_importedCase,label_opts=opts.LabelOpts(is_show=False))
            .add_yaxis(series_name='死亡率',y_axis=CNhis_deadRate,label_opts=opts.LabelOpts(is_show=False))
            .add_yaxis(series_name='治愈率',y_axis=CNhis_healRate,label_opts=opts.LabelOpts(is_show=False))
            .add_yaxis(series_name='noInfect',y_axis=CNhis_noInfect,label_opts=opts.LabelOpts(is_show=False))
            .set_global_opts(title_opts=opts.TitleOpts(title='历史总体信息',pos_left='50%',pos_top='10%'),tooltip_opts=opts.TooltipOpts(axis_pointer_type= 'cross'))

    )#创建散点图
    # line_CNhis.render(path+'\\Chinahistory.html')#将生成的图像保存为html文件并存放在analisis文件夹
    page.add(line_CNhis)#将图像加入同一页
    if flag: dwf.write_to_file(savaPath+'\\line_CNhis.txt',str(line_CNhis.dump_options_with_quotes()))
    return line_CNhis
    """
    很明显，湖北地区的死亡人数，确诊人数相比其他地区要高的多。湖北地区最早爆发疫情，因此很多人也相信新冠肺炎的发源地是来自于武汉的华南海鲜市场，
    而这些病毒是从野生动物身上传到人体身上的。随着事态发展，一些关键的研究出来了，权威的科学杂志Science上发表了一篇文章，
    最早的一批患者有一部分人没有华南海鲜市场接触史。因此他们推断华南海鲜市场可能并不是新冠肺炎的起源地。故疫情当前，我们应该做的不是互相推卸责任，
    而是共同抵抗病毒的入侵，对于了解病毒的真实来源，更应该看数据说话，不应该听信谣言，更不应该散播谣言。
    """

def allRun():
    analyse_Chinaeveryday()#生成中国每日新增信息的散点图
    analyse_province()#生成中国各省份信息散点图
    analyse_worldhistory()#生成世界总体信息散点图
    analyse_Chinahistory()#生成中国总体信息散点图
    return page.render(savaPath+'\\analyse_all1.html')#生成包含所有图像的网页并存放在analyse_all.html


if __name__=='__main__':
    dwf.createFile(readPath)  # 创建不存在的文件夹data
    dwf.createFile(savaPath)  # 创建不存在的文件夹../data/data_Map_analyse1
    # from data_get import getAllData
    # getAllData.allRun() #爬取数据
    allRun()
